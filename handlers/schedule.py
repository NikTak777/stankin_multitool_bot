from aiogram import Router, F, types, Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from datetime import datetime, timedelta

import pytz

from services.schedule_service import get_schedule_for_date
from keyboards.schedule_keyboards import get_custom_schedule_keyboard, get_week_days_keyboard
from keyboards.back_to_menu import get_back_inline_keyboard
from states.schedule import ScheduleState
from utils.logger import write_user_log
from utils.user_utils import check_group_user

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
from decorators.private_only import private_only
from decorators.sync_username import sync_username
from decorators.ensure_user_in_db import ensure_user_in_db

router = Router()

tz_moscow = pytz.timezone("Europe/Moscow")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /schedule ---
@router.message(Command("schedule"))
@private_only
@ensure_user_in_db
@sync_username
async def cmd_schedule(message: types.Message, state: FSMContext, bot: Bot):

    write_user_log(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} ({message.from_user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")

    user_has_group = await check_group_user(message.from_user, state, bot, message=message, from_schedule=True)
    if not user_has_group:
        return

    today = datetime.now(tz=tz_moscow)
    await show_schedule_for_date(message.from_user.id, message.from_user.full_name, today, message=message)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ ---
@router.callback_query(F.data == "schedule")
async def show_today_schedule(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    user_has_group = await check_group_user(callback.from_user, state, bot, callback=callback)
    if not user_has_group:
        return

    today = datetime.now(tz=tz_moscow)
    await show_schedule_for_date(callback.from_user.id, callback.from_user.full_name, today, callback=callback)
    await callback.answer()


# --- –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è ---
@router.callback_query(F.data.startswith("schedule_offset_"))
async def handle_day_offset(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    offset = int(callback.data.split("_")[-1])
    today = datetime.now(tz=tz_moscow)
    target_date = today + timedelta(days=offset)
    while target_date.weekday() == 6:  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        target_date += timedelta(days=1)

    user_has_group = await check_group_user(callback.from_user, state, bot, callback=callback)
    if not user_has_group:
        return

    await show_schedule_for_date(
        user_id=callback.from_user.id,
        user_fullname=callback.from_user.full_name,
        target_date=target_date,
        callback=callback
    )


# --- –í—ã–±–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –¥–Ω—è ---
@router.callback_query(F.data == "schedule_custom")
async def choose_custom_day(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–Ω—è–º–∏ –º–µ—Å—è—Ü–∞
    buttons = [[types.KeyboardButton(text=str(i)) for i in range(j, min(j + 7, 32))] for j in range(1, 32, 7)]
    builder = types.ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:",
        reply_markup=builder
    )
    await state.set_state(ScheduleState.choosing_day)
    await callback.answer()


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è ---
@router.message(ScheduleState.choosing_day)
async def choose_custom_month(message: types.Message, state: FSMContext):
    if message.text.isdigit() and 1 <= int(message.text) <= 31:
        await state.update_data(day=int(message.text))

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –º–µ—Å—è—Ü–∞–º–∏
        month_buttons = [[types.KeyboardButton(text=str(i)) for i in range(j, min(j + 4, 13))] for j in range(1, 13, 4)]
        builder = types.ReplyKeyboardMarkup(keyboard=month_buttons, resize_keyboard=True)

        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:",
            reply_markup=builder
        )
        await state.set_state(ScheduleState.choosing_month)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–Ω—å (1‚Äì31):")


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –∏ –ø–æ–∫–∞–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ---
@router.message(ScheduleState.choosing_month)
async def show_custom_schedule(message: types.Message, state: FSMContext, bot: Bot):
    if message.text.isdigit() and 1 <= int(message.text) <= 12:
        await state.update_data(month=int(message.text))
        data = await state.get_data()
        day, month = data["day"], data["month"]

        user_id = message.from_user.id
        user_fullname = message.from_user.full_name

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_has_group = await check_group_user(message.from_user, state, bot, message=message)
        if not user_has_group:
            return

        tmp_msg = await message.answer("...", reply_markup=types.ReplyKeyboardRemove())
        await tmp_msg.delete()

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        schedule_message = get_schedule_for_date(user_id, day, month)

        if schedule_message is None or schedule_message == "incorrect date":
            # –û—à–∏–±–∫–∞ –¥–∞—Ç—ã
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–µ–Ω—å", callback_data="schedule_custom")]
            ])
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–Ω—è –∏ –º–µ—Å—è—Ü–∞.\n–•–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–µ–Ω—å?",
                reply_markup=keyboard
            )
            write_user_log(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_fullname} ({user_id}) –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É {day}.{month}")
        else:

            target_date = datetime(message.date.year, month, day, tzinfo=tz_moscow)

            await show_custom_schedule_for_date(
                user_id=user_id,
                user_fullname=user_fullname,
                target_date=target_date,
                message=message
            )
            write_user_log(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_fullname} ({user_id}) –ø–æ—Å–º–æ—Ç—Ä–µ–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day}.{month}")

        await state.clear()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–µ—Å—è—Ü (1‚Äì12):")


@router.callback_query(F.data.startswith("schedule_date_"))
async def handle_custom_schedule_date(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    date_str = callback.data.split("_")[-1]
    target_date = datetime.strptime(date_str, "%Y-%m-%d").replace(tzinfo=tz_moscow)

    user_has_group = await check_group_user(callback.from_user, state, bot, callback=callback)
    if not user_has_group:
        return

    await show_custom_schedule_for_date(
        user_id=callback.from_user.id,
        user_fullname=callback.from_user.full_name,
        target_date=target_date,
        callback=callback
    )

# --- –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ---
async def show_schedule_for_date(
    user_id: int,
    user_fullname: str,
    target_date: datetime,
    message: types.Message | None = None,
    callback: types.CallbackQuery | None = None,
):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π."""
    schedule_message = get_schedule_for_date(user_id, target_date.day, target_date.month)

    if not schedule_message:
        if callback:
            await callback.message.edit_text("‚ö†Ô∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã.", reply_markup=get_back_inline_keyboard("start"))
            await callback.answer()
        elif message:
            await message.answer("‚ö†Ô∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã.", reply_markup=get_back_inline_keyboard("start"))
        return

    inline_kb = get_week_days_keyboard()

    try:
        if callback:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await callback.message.edit_text(
                text=schedule_message,
                reply_markup=inline_kb,
                parse_mode="HTML"
            )
            await callback.answer()
        elif message:
            # –ù–æ–≤—ã–π –≤—ã–∑–æ–≤ (/schedule)
            await message.answer(
                text=schedule_message,
                reply_markup=inline_kb,
                parse_mode="HTML"
            )
    except TelegramBadRequest as e:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º "message is not modified"
        if "message is not modified" not in str(e):
            print(f"TelegramBadRequest: {e}")

    write_user_log(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_fullname} ({user_id}) –ø–æ—Å–º–æ—Ç—Ä–µ–ª –Ω–µ–¥–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {target_date.strftime('%d.%m')}"
    )


# --- –û—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç–µ (—Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ —Å—Ç—Ä–µ–ª–∫–∞–º–∏) ---
async def show_custom_schedule_for_date(
    user_id: int,
    user_fullname: str,
    target_date: datetime,
    message: types.Message | None = None,
    callback: types.CallbackQuery | None = None,
):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç/—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –í–ø–µ—Ä—ë–¥/–ù–∞–∑–∞–¥ + –≤—ã–±–æ—Ä –Ω–æ–≤–æ–π –¥–∞—Ç—ã + –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é."""

    schedule_message = get_schedule_for_date(user_id, target_date.day, target_date.month)

    if not schedule_message or schedule_message == "incorrect date":
        text = "‚ö†Ô∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã."
        if callback:
            await callback.message.edit_text(text, reply_markup=get_back_inline_keyboard("start"))
            await callback.answer()
        elif message:
            await message.answer(text, reply_markup=get_back_inline_keyboard("start"))
        return

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    kb = get_custom_schedule_keyboard(target_date)

    try:
        if callback:
            await callback.message.edit_text(
                text=schedule_message,
                reply_markup=kb,
                parse_mode="HTML"
            )
            await callback.answer()
        elif message:
            await message.answer(
                text=schedule_message,
                reply_markup=kb,
                parse_mode="HTML"

            )

    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            print(f"TelegramBadRequest: {e}")

    write_user_log(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_fullname} ({user_id}) –ø–æ—Å–º–æ—Ç—Ä–µ–ª –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {target_date.strftime('%d.%m')}"
    )