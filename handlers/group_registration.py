from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from states.group_registration import GroupRegistration
from utils.logger import write_user_log
from utils.group_utils import load_groups, save_groups, get_group_name_by_id, is_valid_group_name
from utils.database import add_user_to_db, check_user_exists
from utils.group_utils import is_bot_admin, is_group_registered, is_group_file_exists
from utils.user_utils import is_admin
from decorators.group_only import group_only

router = Router()

@router.message(Command("init"))
@group_only
async def initialization_bot_in_group(message: types.Message, state: FSMContext):
    if not check_user_exists(message.from_user.id):
        add_user_to_db(message.from_user.id, message.from_user.username, message.from_user.full_name)

    if message.chat.type not in ["group", "supergroup"]:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return

    group_id = message.chat.id
    user_id = message.from_user.id
    user_name = message.from_user.full_name

    if not await is_bot_admin(group_id):
        await message.answer("‚ùå –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π!")
        return

    groups_list = await load_groups()

    if not await is_admin(group_id, user_id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≥—Ä—É–ø–ø—ã!")
        return

    write_user_log(f"–ê–¥–º–∏–Ω {user_name} ({user_id}) –≥—Ä—É–ø–ø—ã {group_id} –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")

    if is_group_registered(group_id, groups_list):
        group_name = get_group_name_by_id(group_id, groups_list)
        await message.answer(f"‚úÖ –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞! –í–∞—à –Ω–æ–º–µ—Ä ‚Äî {group_name}")
        write_user_log(
            f"–ê–¥–º–∏–Ω {user_name} ({user_id}) –∑–∞–∫–æ–Ω—á–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ì—Ä—É–ø–ø–∞ {group_name} {group_id} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞"
        )
        if not await is_group_file_exists(group_name):
            await message.answer("‚ö†Ô∏è –ü–æ–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    await state.update_data(init_user_id=user_id)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data="cancel_registration")]]
    )

    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}!\n‚ùå –í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞. –£–∫–∞–∂–∏—Ç–µ –µ—ë –Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–î–ë-23-10):",
        reply_markup=keyboard
    )
    await state.set_state(GroupRegistration.waiting_for_group_name)


@router.callback_query(lambda c: c.data == "cancel_registration")
async def cancel_registration(callback: CallbackQuery, state: FSMContext):
    await state.clear()

    user_id = callback.from_user.id
    user_name = callback.from_user.full_name
    group_id = callback.message.chat.id

    if not await is_admin(group_id, user_id):
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!", show_alert=True)
        return

    write_user_log(f"–ö–Ω–æ–ø–∫–∞ '–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é' –Ω–∞–∂–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_name} ({user_id}) –≤ –≥—Ä—É–ø–ø–µ {group_id}")
    await callback.message.edit_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.answer()


@router.message(GroupRegistration.waiting_for_group_name)
async def process_group_name(message: types.Message, state: FSMContext):
    group_id = message.chat.id
    user_id = message.from_user.id
    user_data = await state.get_data()

    if user_id != user_data.get("init_user_id"):
        return

    group_name = message.text.strip()
    groups = await load_groups()

    if not is_valid_group_name(group_name):
        await message.answer("‚ö†Ô∏è –ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –≤–≤–µ–¥—ë–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n–§–æ—Ä–º–∞—Ç: XXX-00-00 (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–î–ë-23-10).")
        return

    if group_name in groups:
        await message.answer("‚ùå –¢–∞–∫–∞—è –≥—Ä—É–ø–ø–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞! –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä:")
        return

    groups[group_name] = {"chat_id": group_id, "registered_by": user_id}
    await save_groups(groups)

    await message.answer(f"‚úÖ –ì—Ä—É–ø–ø–∞ {group_name} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!")
    write_user_log(f"–ê–¥–º–∏–Ω {message.from_user.full_name} ({user_id}) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª –≥—Ä—É–ø–ø—É {group_name} ({group_id})")
    await state.clear()

    if not await is_group_file_exists(group_name):
        await message.answer("‚ö†Ô∏è –ü–æ–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ.")
