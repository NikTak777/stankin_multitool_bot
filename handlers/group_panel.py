from aiogram import types, Bot, Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (ReplyKeyboardRemove, ChatMemberAdministrator,
                           ChatMemberOwner, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery)
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardMarkup, InlineKeyboardButton, InlineKeyboardBuilder
from aiogram.filters.state import StateFilter
from aiogram.exceptions import TelegramBadRequest


from utils.group_utils import load_groups, save_groups
from handlers.start_menu import send_start_menu
from utils.user_utils import get_user_name, is_user_group_admin
from utils.logger import write_user_log
from utils.database import get_users_by_group, get_approval_status, toggle_user_approval, update_real_user_name, get_real_user_name
from keyboards.group_panel_keyboards import get_edit_send_time_keyboard, ALLOWED_HOURS, _fmt_hour
from states.group_panel_states import SendTimeState

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
from decorators.private_only import private_only
from decorators.sync_username import sync_username
from decorators.ensure_user_in_db import ensure_user_in_db


router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /panel
@router.message(Command("panel"))
@private_only
@ensure_user_in_db
@sync_username
async def cmd_group_panel(message: types.Message):
    await send_admin_panel(
        bot=message.bot,
        user_id=message.from_user.id,
        chat_id=message.chat.id,
        full_name=message.from_user.full_name,
        message=message,          # –ø–µ—Ä–µ–¥–∞—ë–º message
        callback=None             # –Ω–µ –∏–∑ callback
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
@router.callback_query(F.data == "panel")
@sync_username
async def handle_panel_callback(callback: types.CallbackQuery):
    await send_admin_panel(
        bot=callback.bot,
        user_id=callback.from_user.id,
        chat_id=callback.message.chat.id,
        full_name=callback.from_user.full_name,
        message=callback.message, # –ø–µ—Ä–µ–¥–∞—ë–º callback.message
        callback=callback         # —Å–∏–≥–Ω–∞–ª, —á—Ç–æ –≤—ã–∑–≤–∞–Ω–æ –∏–∑ callback
    )
    await callback.answer()

async def send_admin_panel(
    bot: Bot,
    user_id: int,
    chat_id: int,
    full_name: str,
    message: types.Message,
    callback: types.CallbackQuery | None
):
    is_admin = await is_user_group_admin(user_id)

    if not is_admin:
        if callback:
            await message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç–∞—Ä–æ—Å—Ç–∞.")
        else:
            await bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç–∞—Ä–æ—Å—Ç–∞.")
        return

    groups = await load_groups()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞—Ä–æ—Å—Ç–æ–π
    user_group = next((group for group, data in groups.items() if data["registered_by"] == user_id), None)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É", callback_data="edit_group")],
        [InlineKeyboardButton(text="‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="edit_send_time")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data="delete_group")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="start")]
    ])

    user_name = get_real_user_name(user_id)

    text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}!\n"
        "–≠—Ç–æ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø–æ–π.\n\n"
        f"üìå –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å —Å—Ç–∞—Ä–æ—Å—Ç–æ–π –≥—Ä—É–ø–ø—ã {user_group}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    msg = f"–ê–¥–º–∏–Ω {full_name} ({user_id}) –æ—Ç–∫—Ä—ã–ª –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–π {user_group}"
    write_user_log(msg)

    if callback:
        await message.edit_text(text, reply_markup=keyboard)
    else:
        await bot.send_message(chat_id, text, reply_markup=keyboard)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class EditState(StatesGroup):
    browsing = State()
    changing_name = State()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_edit_keyboard(student_id: int):
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
    builder.row(
        types.InlineKeyboardButton(text="‚¨ÜÔ∏è", callback_data="move_up"),
        types.InlineKeyboardButton(text="‚¨áÔ∏è", callback_data="move_down")
    )

    # –ö–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏
    builder.row(types.InlineKeyboardButton(
        text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è",
        callback_data="change_name"
    ))

    # –ö–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
    status = "‚úÖ" if get_approval_status(student_id) else "üö´"
    builder.row(types.InlineKeyboardButton(
        text=f"{status} –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è",
        callback_data="toggle_approval"
    ))

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    builder.row(types.InlineKeyboardButton(
        text=" ‚óÄÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å ",
        callback_data="cancel_edit"
    ))

    return builder.as_markup()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@router.callback_query(lambda c: c.data == "edit_group")
async def handle_edit_group(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    groups = await load_groups()

    user_group = next((g for g, d in groups.items() if d["registered_by"] == user_id), None)
    if not user_group:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return

    students = get_users_by_group(user_group)
    if not students:
        await callback.answer("‚ùå –í –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", show_alert=True)
        msg = f"–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –∞–¥–º–∏–Ω–∞ {callback.from_user.full_name} ({callback.from_user.id}) –∑–∞–∫—Ä—ã—Ç–∞. –í –≥—Ä—É–ø–ø–µ {user_group} –Ω–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"
        write_user_log(msg)
        return

    await state.set_state(EditState.browsing)
    await state.update_data(
        current_index=0,
        user_group=user_group,
        message_id=callback.message.message_id
    )

    await update_group_view(
        bot=callback.bot,
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        state=state
    )


async def update_group_view(bot: Bot, chat_id: int, message_id: int, state: FSMContext):
    data = await state.get_data()
    user_group = data['user_group']
    current_index = data['current_index']

    students = get_users_by_group(user_group)
    if not students:
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text="‚ùå –í –≥—Ä—É–ø–ø–µ –±–æ–ª—å—à–µ –Ω–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"
        )
        await state.clear()
        return

    student_list = "\n".join(
        f"üëâ {'‚úÖ' if s['approved'] else 'üö´'} {s['name']}"
        if i == current_index
        else f"üë§ {'‚úÖ' if s['approved'] else 'üö´'} {s['name']}"
        for i, s in enumerate(students)
    )

    try:
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=f"–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:\n\n{student_list}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_edit_keyboard(students[current_index]['id'])
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise


@router.callback_query(EditState.browsing, lambda c: c.data in ["move_up", "move_down"])
async def handle_move(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    students = get_users_by_group(data['user_group'])

    new_index = (data['current_index'] + (-1 if callback.data == "move_up" else 1)) % len(students)

    await state.update_data(current_index=new_index)
    await callback.answer()

    await update_group_view(
        bot=callback.bot,
        chat_id=callback.message.chat.id,
        message_id=data['message_id'],
        state=state
    )


@router.callback_query(EditState.browsing, lambda c: c.data == "change_name")
async def handle_change_name(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    students = get_users_by_group(data['user_group'])

    await state.update_data(
        selected_student_id=students[data['current_index']]['id'],
        original_name=students[data['current_index']]['name']
    )

    msg = (f"–ê–¥–º–∏–Ω {callback.from_user.full_name} ({callback.from_user.id}) –≥—Ä—É–ø–ø—ã {data['user_group']} "
           f"–Ω–∞—á–∞–ª —É–∫–∞–∑—ã–≤–∞—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {students[data['current_index']]['name']} ({students[data['current_index']]['id']})")
    write_user_log(msg)

    await callback.message.answer(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è {students[data['current_index']]['name']}:")
    await state.set_state(EditState.changing_name)


@router.message(EditState.changing_name)
async def handle_new_name(message: types.Message, state: FSMContext):
    data = await state.get_data()
    new_name = message.text.strip()

    if not new_name or new_name == data['original_name']:
        # await message.answer("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º")
        msg = (f"–ê–¥–º–∏–Ω {message.from_user.full_name} ({message.from_user.id}) –≥—Ä—É–ø–ø—ã {data['user_group']} "
               f"–Ω–µ –∏–∑–º–µ–Ω–∏–ª –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({data['selected_student_id']})")
        write_user_log(msg)

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
        try:
            await message.bot.delete_message(
                chat_id=message.chat.id,
                message_id=data['message_id']
            )
        except TelegramBadRequest:
            pass

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        students = get_users_by_group(data['user_group'])
        current_index = data['current_index']

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
        student_list = "\n".join(
            f"üëâ {'‚úÖ' if s['approved'] else 'üö´'} {s['name']}"
            if i == current_index
            else f"üë§ {'‚úÖ' if s['approved'] else 'üö´'} {s['name']}"
            for i, s in enumerate(students)
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        new_msg = await message.answer(
            f"‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º\n\n"
            f"–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:\n\n{student_list}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_edit_keyboard(students[current_index]['id'])
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–æ–≤—ã–º message_id
        await state.update_data(
            message_id=new_msg.message_id,
            current_index=data['current_index']
        )
        await state.set_state(EditState.browsing)
        return

    if update_real_user_name(data['selected_student_id'], new_name):

        msg = (f"–ê–¥–º–∏–Ω {message.from_user.full_name} ({message.from_user.id}) –≥—Ä—É–ø–ø—ã {data['user_group']} "
               f"–∏–∑–º–µ–Ω–∏–ª –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {new_name} ({data['selected_student_id']})")
        write_user_log(msg)

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
        try:
            await message.bot.delete_message(
                chat_id=message.chat.id,
                message_id=data['message_id']
            )
        except TelegramBadRequest:
            pass

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        students = get_users_by_group(data['user_group'])
        current_index = data['current_index']

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
        student_list = "\n".join(
            f"üëâ {'‚úÖ' if s['approved'] else 'üö´'} {s['name']}"
            if i == current_index
            else f"üë§ {'‚úÖ' if s['approved'] else 'üö´'} {s['name']}"
            for i, s in enumerate(students)
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        new_msg = await message.answer(
            f"‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
            f"–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:\n\n{student_list}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_edit_keyboard(students[current_index]['id'])
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–æ–≤—ã–º message_id
        await state.update_data(
            message_id=new_msg.message_id,
            current_index=data['current_index']
        )
        await state.set_state(EditState.browsing)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏")


@router.callback_query(EditState.browsing, lambda c: c.data == "toggle_approval")
async def handle_toggle_approval(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    students = get_users_by_group(data['user_group'])
    current_student = students[data['current_index']]

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    new_status = toggle_user_approval(current_student['id'])

    if new_status is not None:
        status_text = "—Ä–∞–∑—Ä–µ—à–µ–Ω—ã" if new_status else "–∑–∞–ø—Ä–µ—â–µ–Ω—ã"
        await callback.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è {current_student['name']} {status_text}", show_alert=True)

        msg = (f"–ê–¥–º–∏–Ω {callback.from_user.full_name} ({callback.from_user.id}) –∏–∑–º–µ–Ω–∏–ª "
               f"—Å—Ç–∞—Ç—É—Å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_student['name']} ({current_student['id']}) –Ω–∞ '{status_text}'")
        write_user_log(msg)

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await update_group_view(
            bot=callback.bot,
            chat_id=callback.message.chat.id,
            message_id=data['message_id'],
            state=state
        )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)


@router.callback_query(EditState.browsing, lambda c: c.data == "cancel_edit")
async def handle_cancel(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await callback.message.edit_text(
            "‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
            reply_markup=None
        )
        groups = await load_groups()
        user_group = next((group for group, data in groups.items() if data["registered_by"] == callback.from_user.id), None)
        msg = f"–ê–¥–º–∏–Ω {callback.from_user.full_name} ({callback.from_user.id}) –∑–∞–∫—Ä—ã–ª –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–π {user_group}"
        write_user_log(msg)
    except TelegramBadRequest:
        pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await send_start_menu(callback, new_message=True)
    await callback.answer()


class DeleteGroupState(StatesGroup):
    waiting_for_confirmation = State()


@router.callback_query(lambda c: c.data == "delete_group")
async def delete_group(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
    user_id = callback.from_user.id
    groups_data = await load_groups()

    user_group = next((group for group, data in groups_data.items() if data["registered_by"] == user_id), None)

    if not user_group:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    await state.update_data(group_to_delete=user_group)
    await state.set_state(DeleteGroupState.waiting_for_confirmation)

    await callback.message.answer(
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É {user_group}?\n\n"
        "‚ùó –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    )

    await callback.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ


@router.message(DeleteGroupState.waiting_for_confirmation)
async def confirm_delete_group(message: types.Message, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    data = await state.get_data()
    group_to_delete = data.get("group_to_delete")

    if message.text.strip() != group_to_delete:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ. –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è.")
        await state.clear()
        return

    groups_data = await load_groups()
    if group_to_delete in groups_data:
        del groups_data[group_to_delete]
        await save_groups(groups_data)
        await message.answer(f"‚úÖ –ì—Ä—É–ø–ø–∞ {group_to_delete} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")

        msg = f"–ê–¥–º–∏–Ω {message.from_user.full_name} ({message.from_user.id}) —É–¥–∞–ª–∏–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã –≥—Ä—É–ø–ø—É {group_to_delete}"
        write_user_log(msg)

    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    await state.clear()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await send_start_menu(message, new_message=True)


def _next_allowed_hour(curr: int, delta: int) -> int:
    # delta = +1 (–≤–ø—Ä–∞–≤–æ) –∏–ª–∏ -1 (–≤–ª–µ–≤–æ)
    idx = ALLOWED_HOURS.index(curr) if curr in ALLOWED_HOURS else 0
    return ALLOWED_HOURS[(idx + delta) % len(ALLOWED_HOURS)]


@router.callback_query(F.data == "edit_send_time")
async def handle_edit_send_time(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    groups = await load_groups()
    # –Ω–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—É —Å—Ç–∞—Ä–æ—Å—Ç—ã
    user_group = next((g for g, d in groups.items() if d.get("registered_by") == user_id), None)
    if not user_group:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return

    # –±–µ—Ä—ë–º —Ç–µ–∫—É—â–∏–π —á–∞—Å, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20
    current_hour = int(groups[user_group].get("send_hour", 20))
    if current_hour not in ALLOWED_HOURS:
        current_hour = 20

    await state.set_state(SendTimeState.editing)
    await state.update_data(user_group=user_group, hour=current_hour)

    try:
        await callback.message.edit_text(
            text=(
                "‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã.\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ —á–∞—Å—ã –∏–∑ –æ–∫–Ω–∞ 20:00‚Äì08:00.\n\n"
                f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {_fmt_hour(current_hour)}"
            ),
            reply_markup=get_edit_send_time_keyboard(current_hour)
        )
    except TelegramBadRequest:
        pass
    await callback.answer()


@router.callback_query(SendTimeState.editing, F.data.in_(["send_time_left", "send_time_right"]))
async def change_send_time(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    hour = int(data.get("hour", 20))
    delta = -1 if callback.data == "send_time_left" else +1
    new_hour = _next_allowed_hour(hour, delta)
    await state.update_data(hour=new_hour)

    try:
        await callback.message.edit_text(
            text=(
                "‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã.\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ —á–∞—Å—ã –∏–∑ –æ–∫–Ω–∞ 20:00‚Äì08:00.\n\n"
                f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {_fmt_hour(new_hour)}"
            ),
            reply_markup=get_edit_send_time_keyboard(new_hour)
        )
    except TelegramBadRequest:
        pass
    await callback.answer()


@router.callback_query(SendTimeState.editing, F.data == "send_time_save")
async def save_send_time(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_group = data.get("user_group")
    new_hour = int(data.get("hour", 20))

    groups = await load_groups()
    if user_group not in groups:
        await callback.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        await state.clear()
        return

    groups[user_group]["send_hour"] = new_hour
    await save_groups(groups)  # –Ω–µ –∑–∞–±—É–¥—å –∏–º–ø–æ—Ä—Ç: from utils.group_utils import save_groups

    write_user_log(
        f"–ê–¥–º–∏–Ω {callback.from_user.full_name} ({callback.from_user.id}) "
        f"–∏–∑–º–µ–Ω–∏–ª –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä—É–ø–ø—ã {user_group} –Ω–∞ {_fmt_hour(new_hour)}"
    )

    await state.clear()
    await callback.answer("‚úÖ –í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!", show_alert=True)

    # –í–µ—Ä–Ω—ë–º—Å—è –≤ –ø–∞–Ω–µ–ª—å
    await send_admin_panel(
        bot=callback.bot,
        user_id=callback.from_user.id,
        chat_id=callback.message.chat.id,
        full_name=callback.from_user.full_name,
        message=callback.message,
        callback=callback
    )