from aiogram import types, Router
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, ReplyKeyboardRemove

from utils.logger import write_user_log
from utils.database import get_user_info, get_user_wishlist

from keyboards.friend_wishlist_keyboard import get_error_wishlist_keyboard
from keyboards.cancel_keyboard import get_cancel_inline_keyboard

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
from decorators.private_only import private_only
from decorators.sync_username import sync_username
from decorators.ensure_user_in_db import ensure_user_in_db
from decorators.require_birthdate import require_birthdate

from services.friend_wishlist_service import (
    birthday_missing_text,
    friend_wishlist_prompt,
    own_wishlist_message,
    friend_wishlist_not_found,
    friend_wishlist_empty,
    friend_wishlist_info
)

router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /friend_wishlist
@router.message(Command("friend_wishlist"))
@private_only
@ensure_user_in_db
@sync_username
async def cmd_friend_wishlist(message: types.Message, state: FSMContext):

    msg = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} ({message.from_user.id}) –≤–≤—ë–ª –∫–æ–º–∞–Ω–¥—É /friend_wishlist"
    write_user_log(msg)

    await process_friend_wishlist(message.from_user, message, state, is_callback=False)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–∫–∏
@router.callback_query(lambda c: c.data == "friend_wishlist")
async def callback_friend_wishlist(callback: CallbackQuery, state: FSMContext):

    msg = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.full_name} ({callback.from_user.id}) –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏—à–ª–∏—Å—Ç–∞ –¥—Ä—É–≥–∞"
    write_user_log(msg)

    await callback.answer()
    await process_friend_wishlist(callback.from_user, callback.message, state, is_callback=True)


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–≥–∞ –¥—Ä—É–≥–∞
@require_birthdate("friend_wishlist")
async def process_friend_wishlist(user, message_obj, state: FSMContext, is_callback=False):
    user_id = user.id
    user_info = get_user_info(user_id)

    user_tag = user_info.get("user_tag")
    msg_to_user = f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á–µ–π –≤–∏—à–ª–∏—Å—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å.\n–ù–∞–ø—Ä–∏–º–µ—Ä, @{user_tag}" if user_tag else "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á–µ–π –≤–∏—à–ª–∏—Å—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å.\n–ù–∞–ø—Ä–∏–º–µ—Ä, @StankinMultiToolBot"

    if is_callback:
        await message_obj.edit_text(msg_to_user, reply_markup=get_cancel_inline_keyboard("start"))
    else:
        await message_obj.answer(msg_to_user, reply_markup=get_cancel_inline_keyboard("start"))

    await state.set_state("awaiting_friend_wishlist")


# –•—ç–Ω–¥–ª–µ—Ä, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —Ç–µ–≥ –¥—Ä—É–≥–∞
@router.message(StateFilter("awaiting_friend_wishlist"))
async def show_friend_wishlist(message: types.Message, state: FSMContext):

    friend_tag = message.text.strip().lstrip("@")
    if not (2 <= len(friend_tag) <= 50):
        await message.answer("–¢–µ–≥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    user_id = message.from_user.id
    user_info = get_user_info(user_id)
    user_tag = user_info.get("user_tag")
    result = get_user_wishlist(friend_tag)

    if friend_tag == user_tag:
        msg_to_user = own_wishlist_message(user_info.get("user_wishlist"))
        await message.answer(
            text=f"–•–º, –≤—ã –≤–≤–µ–ª–∏ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–≥. –ü—ã—Ç–∞–µ—Ç–µ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∞–º–∏ —Å–µ–±—è? üòâ\n\n{msg_to_user}",
            reply_markup=get_error_wishlist_keyboard()
        )
        write_user_log(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} ({user_id}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–π –∂–µ –≤–∏—à–ª–∏—Å—Ç")
    elif result == "not_found":
        await message.answer(
            text=friend_wishlist_not_found(friend_tag),
            reply_markup=get_error_wishlist_keyboard()
        )
        write_user_log(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} ({user_id}) –Ω–µ —Å–º–æ–≥ —É–∑–Ω–∞—Ç—å –≤–∏—à–ª–∏—Å—Ç, @{friend_tag} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    elif isinstance(result, tuple) and result[1] == "no_wishlist":
        friend_name = result[0] or ""
        await message.answer(
            text=friend_wishlist_empty(friend_name, friend_tag),
            reply_markup=get_error_wishlist_keyboard()
        )
        write_user_log(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} ({user_id}) –∑–∞–ø—Ä–æ—Å–∏–ª –≤–∏—à–ª–∏—Å—Ç @{friend_tag}, –Ω–æ –µ–≥–æ –Ω–µ—Ç")
    else:
        friend_name, friend_wishlist = result
        friend_name = friend_name or ""
        await message.answer(
            text=friend_wishlist_info(friend_name, friend_tag, friend_wishlist),
            reply_markup = get_error_wishlist_keyboard()
        )
        write_user_log(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} ({user_id}) –ø–æ–ª—É—á–∏–ª –≤–∏—à–ª–∏—Å—Ç @{friend_tag}")

    await state.clear()
