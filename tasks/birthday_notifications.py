# tasks/birthday_notifications

import asyncio
import pytz

from aiogram.utils.keyboard import InlineKeyboardButton, InlineKeyboardMarkup

from datetime import datetime, timedelta

from utils.logger import write_user_log
from utils.database import check_users, get_user_info, check_users_in_7_days
from utils.group_utils import load_groups
from utils.user_utils import is_user_accessible

from bot import bot

tz_moscow = pytz.timezone("Europe/Moscow")

async def check_birthdays():
    while True:
        now = datetime.now(tz=tz_moscow)

        next_run = now.replace(hour=8, minute=0, second=0, microsecond=0)
        if now >= next_run:
            next_run += timedelta(days=1)

        time_to_sleep = (next_run - now).total_seconds()
        msg = f"–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –≤ {next_run} (—á–µ—Ä–µ–∑ {time_to_sleep} —Å–µ–∫—É–Ω–¥)"
        write_user_log(msg)

        await asyncio.sleep(time_to_sleep)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –î–† —Å–µ–≥–æ–¥–Ω—è
        birthdays_today = check_users()

        if birthdays_today:
            group_messages = {}  # {chat_id: [messages]}

            groups = await load_groups()

            for UserID in birthdays_today:
                user_info = get_user_info(UserID)
                if user_info["is_approved"]:
                    UserNAME = f"{user_info['real_user_name']} @{user_info['user_tag']}"
                    if not user_info["real_user_name"]:
                        UserNAME = f"{user_info['user_name']} @{user_info['user_tag']}"
                        if not user_info['user_tag']:
                            UserNAME = f"{user_info['user_name']}"

                    user_group = user_info.get("user_group")

                    if not user_group or user_group not in groups:
                        continue  # –ï—Å–ª–∏ –≥—Ä—É–ø–ø—ã –Ω–µ—Ç –≤ JSON, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

                    chat_id = groups[user_group]["chat_id"]

                    user_name = user_info["real_user_name"]
                    if not user_name:
                        user_name = user_info['user_name']

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    if not await is_user_accessible(UserID):
                        write_user_log(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {UserID} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è")
                        continue

                    # –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text=f"üéâ –ü–æ–∑–¥—Ä–∞–≤–∏—Ç—å {user_name}", url=f"tg://user?id={UserID}")]
                    ])

                    message = (
                        f"üéâ –î–æ—Ä–æ–≥–æ–π(-–∞—è) {UserNAME}, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Ç–µ–±—è —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! üéÇ\n"
                        "–ñ–µ–ª–∞–µ–º –∑–¥–æ—Ä–æ–≤—å—è, —É–¥–∞—á–∏ –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –º–µ—á—Ç!\n"
                        "–ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥–µ–Ω—å –±—É–¥–µ—Ç –ø–æ–ª–æ–Ω –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–π –∏ —É–ª—ã–±–æ–∫. üéÅ"
                    )

                    if chat_id not in group_messages:
                        group_messages[chat_id] = []
                    group_messages[chat_id].append((message, keyboard))

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—ã
            for chat_id, messages in group_messages.items():
                for msg, kb in messages:
                    await bot.send_message(chat_id=chat_id, text=msg, reply_markup=kb)
                write_user_log(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {chat_id}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é
        upcoming_birthdays = check_users_in_7_days()

        if upcoming_birthdays:
            group_messages = {}  # {chat_id: [messages]}

            groups = await load_groups()

            for UserID in upcoming_birthdays:
                user_info = get_user_info(UserID)
                if user_info["is_approved"]:
                    UserNAME = f"{user_info['real_user_name']} @{user_info['user_tag']}"
                    if not user_info["real_user_name"]:
                        UserNAME = f"{user_info['user_name']} @{user_info['user_tag']}"
                        if not user_info['user_tag']:
                            UserNAME = f"{user_info['user_name']}"

                    user_group = user_info["user_group"]

                    if not user_group or user_group not in groups:
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –≥—Ä—É–ø–ø—ã –Ω–µ—Ç –≤ JSON

                    UserWISHLIST = user_info["user_wishlist"]
                    if not UserWISHLIST:
                        UserWISHLIST = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

                    chat_id = groups[user_group]["chat_id"]

                    message = (
                        f"üìÖ –†–æ–≤–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é {UserNAME} –ø—Ä–∞–∑–¥–Ω—É–µ—Ç —Å–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è! ü•≥\n"
                        f"–°–∞–º–æ–µ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏! üéÅ\n"
                        f"üéà –í–∏—à–ª–∏—Å—Ç: {UserWISHLIST}"
                    )

                    if chat_id not in group_messages:
                        group_messages[chat_id] = []
                    group_messages[chat_id].append(message)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—ã
            for chat_id, messages in group_messages.items():
                for msg in messages:
                    await bot.send_message(chat_id=chat_id, text=msg)
                write_user_log(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –±—É–¥—É—â–∏—Ö –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {chat_id}")