from datetime import datetime, timedelta
from utils.schedule_utils import is_group_file_exists
from utils.database import get_user_info

import json
from datetime import datetime
from typing import List, Dict, Any
import pytz


def get_schedule_for_date(user_id: int, day: int, month: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
    user_info = get_user_info(user_id)
    group, subgroup = user_info["user_group"], user_info["user_subgroup"]

    if not is_group_file_exists(group):
        return None

    data = load_schedule(group + ".json")
    return format_schedule(data, day, month, group, subgroup=subgroup)

def format_date(day, month, year=None):
    if year is None:
        return f"{day:02}.{month:02}"
    return f"{day:02}.{month:02}.{year}"


def load_schedule(filename: str) -> List[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ JSON —Ñ–∞–π–ª–∞."""
    with open(filename, "r", encoding="utf-8") as f:
        return json.load(f)


def parse_date_range(date_range: str) -> tuple[datetime, datetime]:
    """–ü–∞—Ä—Å–∏—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç —Ñ–æ—Ä–º–∞—Ç–∞ YYYY.MM.DD-YYYY.MM.DD"""
    start_str, end_str = date_range.split('-')
    start_date = datetime.strptime(start_str, "%Y.%m.%d")
    end_date = datetime.strptime(end_str, "%Y.%m.%d")
    return start_date, end_date


def is_subject_on_date(subject: Dict[str, Any], target_date: datetime) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ—Ö–æ–¥–∏—Ç –ª–∏ –ø—Ä–µ–¥–º–µ—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É."""
    for date_info in subject["dates"]:
        freq = date_info["frequency"]
        date_str = date_info["date"]

        if freq == "once":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–∞—Ç—ã
            lesson_date = datetime.strptime(date_str, "%Y.%m.%d")
            if lesson_date.date() == target_date.date():
                return True

        elif freq == "throughout":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –¥–∞—Ç–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω
            start_date, end_date = parse_date_range(date_str)
            if start_date.date() <= target_date.date() <= end_date.date():
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∑–∞–Ω—è—Ç–∏—è —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é
                delta_days = (target_date - start_date).days
                if delta_days % 14 == 0:  # –ö–∞–∂–¥—ã–µ –¥–≤–µ –Ω–µ–¥–µ–ª–∏
                    return True

        elif freq == "every":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
            start_date, end_date = parse_date_range(date_str)
            if start_date.date() <= target_date.date() <= end_date.date():
                delta_days = (target_date - start_date).days
                if delta_days % 7 == 0:  # –ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é
                    return True

    return False


def format_schedule(schedule: List[Dict[str, Any]], day: int, month: int, group: str, subgroup: str = "Common") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –≤ –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –ø–æ–¥–≥—Ä—É–ø–ø—ã –∏–ª–∏ –≤—Å–µ—Ö –∑–∞–Ω—è—Ç–∏–π."""
    try:
        tz_moscow = pytz.timezone("Europe/Moscow")  # –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ú–æ—Å–∫–≤—ã
        current_year = datetime.now(tz=tz_moscow).year
        target_date = datetime(current_year, month, day)
    except ValueError:
        return "incorrect date"

    # –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–∏–ø–æ–≤ –∑–∞–Ω—è—Ç–∏–π
    subject_types = {
        "Lecture": "–õ–µ–∫—Ü–∏—è",
        "Seminar": "–°–µ–º–∏–Ω–∞—Ä",
        "Laboratory": "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è"
    }

    # –ï—Å–ª–∏ subgroup == "Common", –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è (–∏ A, –∏ B, –∏ Common)
    if subgroup == "Common":
        subjects_on_date = [subj for subj in schedule if is_subject_on_date(subj, target_date)]
    else:
        subjects_on_date = [
            subj for subj in schedule if is_subject_on_date(subj, target_date) and
            (subj["subgroup"] == subgroup or subj["subgroup"] == "Common")
        ]

    formatted_date = format_date(day, month)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–¥–≥—Ä—É–ø–ø—ã A ‚Üí –ê, B ‚Üí –ë
    subgroup_translated = {"A": "–ê", "B": "–ë"}.get(subgroup, subgroup)

    if not subjects_on_date:
        if subgroup == "Common":
            return f"üìÖ –ù–∞ {formatted_date} —É –≥—Ä—É–ø–ø—ã {group} –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç."
        else:
            return f"üìÖ –ù–∞ {formatted_date} —É –ø–æ–¥–≥—Ä—É–ø–ø—ã {subgroup_translated} –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç."

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
    subjects_on_date.sort(key=lambda x: datetime.strptime(x["time"]["start"], "%H:%M"))

    formatted_subjects = []
    for subj in subjects_on_date:
        title = subj["title"]
        lecturer = subj["lecturer"] or "–ù–µ —É–∫–∞–∑–∞–Ω"
        subject_type = subject_types.get(subj["type"], subj["type"])  # –ü–µ—Ä–µ–≤–æ–¥ —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è
        classroom = subj["classroom"] or "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        time_start = subj["time"]["start"]
        time_end = subj["time"]["end"]

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–¥–≥—Ä—É–ø–ø—ã A ‚Üí –ê, B ‚Üí –ë
        subj_subgroup_translated = {"A": "–ê", "B": "–ë"}.get(subj["subgroup"], subj["subgroup"])
        subgroup_info = f", –ø–æ–¥–≥—Ä—É–ø–ø–∞ {subj_subgroup_translated}" if subj["subgroup"] != "Common" else ""

        formatted_subjects.append(
            f"‚è∞ <b>{time_start} ‚Äî {time_end}</b>{subgroup_info}\n"
            f" {title} ({subject_type})\n"
            f" {lecturer}, –∞—É–¥. {classroom}\n"
        )

    if subgroup == "Common":
        return f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group} –Ω–∞ {formatted_date}:\n\n" + "\n".join(formatted_subjects)
    else:
        return f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–≥—Ä—É–ø–ø—ã {subgroup_translated} –Ω–∞ {formatted_date}:\n\n" + "\n".join(formatted_subjects)